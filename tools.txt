#!/bin/bash
# install-tools.sh - Complete installation and configuration script

# Configuration variables - CHANGE THESE
DOCKERHUB_USERNAME="nalla06"
DOCKERHUB_PASSWORD="kondapalli"
GIT_USERNAME="Nalla06"
GIT_PASSWORD="kondapalli06"
JENKINS_ADMIN_USER="admin"
JENKINS_ADMIN_PASSWORD="admin"
EMAIL_RECIPIENT="lakshmi.rajyam06@gmail.com"

# Update system
sudo apt-get update -y

# Install necessary packages
sudo apt-get install -y openjdk-17-jdk maven git curl wget unzip ufw jq xmlstarlet

# Install Docker
sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update -y
sudo apt-get install -y docker-ce docker-ce-cli containerd.io

# Start and enable Docker
sudo systemctl start docker
sudo systemctl enable docker
sudo usermod -aG docker $USER  # Add user to the docker group
sudo usermod -aG docker jenkins # Add jenkins to docker group

# Install Jenkins
curl -fsSL https://pkg.jenkins.io/debian/jenkins.io-2023.key | sudo tee /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] https://pkg.jenkins.io/debian binary/" | sudo tee /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt-get update -y
sudo apt-get install -y jenkins

# Create Jenkins config directory for JCasC
sudo mkdir -p /var/lib/jenkins/casc_configs
sudo cat > /var/lib/jenkins/casc_configs/jenkins.yaml << EOF
jenkins:
  systemMessage: "Jenkins configured automatically by installation script"
  securityRealm:
    local:
      allowsSignup: false
      users:
        - id: "${JENKINS_ADMIN_USER}"
          password: "${JENKINS_ADMIN_PASSWORD}"
  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false
  globalNodeProperties:
    - envVars:
        env:
          - key: "DOCKERHUB_USERNAME"
            value: "${DOCKERHUB_USERNAME}"
  
tool:
  maven:
    installations:
    - name: "Maven"
      properties:
      - installSource:
          installers:
          - maven:
              id: "3.9.6"
  jdk:
    installations:
    - name: "JDK17"
      properties:
      - installSource:
          installers:
          - jdkInstaller:
              acceptLicense: true
              id: "jdk-17-oracle"

credentials:
  system:
    domainCredentials:
    - credentials:
      - usernamePassword:
          scope: "GLOBAL"
          id: "dockerhub-credentials"
          username: "${DOCKERHUB_USERNAME}"
          password: "${DOCKERHUB_PASSWORD}"
          description: "Docker Hub Credentials"
      - usernamePassword:
          scope: "GLOBAL"
          id: "git-credentials"
          username: "${GIT_USERNAME}"
          password: "${GIT_PASSWORD}"
          description: "Git Repository Credentials"
      - string:
          scope: "GLOBAL"
          id: "sonarqube-token"
          secret: "admin"
          description: "SonarQube Token"

unclassified:
  sonarGlobalConfiguration:
    buildWrapperEnabled: true
    installations:
    - name: "SonarQube"
      serverUrl: "http://localhost:9000"
      credentialsId: "sonarqube-token"
  email-ext:
    mailAccount:
      smtpHost: "smtp.gmail.com"
      smtpPort: "587"
      useSsl: false
      useTls: true
      defaultRecipients: "${EMAIL_RECIPIENT}"
  slackNotifier:
    teamDomain: "your-workspace"
    tokenCredentialId: "slack-token"
    room: "#deployments"
EOF

# Configure Jenkins to use Configuration as Code
sudo cat > /etc/default/jenkins << EOF
# defaults for Jenkins automation server

# pulled in from the init script; makes things easier.
NAME=jenkins
JENKINS_USER=jenkins
JENKINS_GROUP=jenkins

# location of the configuration directory
JENKINS_HOME=/var/lib/jenkins

# arguments to pass to java
JAVA_ARGS="-Djava.awt.headless=true -Djenkins.install.runSetupWizard=false -Dcasc.jenkins.config=/var/lib/jenkins/casc_configs"

# jenkins home location
JENKINS_HOME=/var/lib/jenkins

# set this to false if you don't want Jenkins to run by itself
# in this case, you can start it by hand using java -jar jenkins.war
JENKINS_RUN_STANDALONE=true

# log location.  this may be a syslog facility.priority
JENKINS_LOG=/var/log/jenkins/jenkins.log

# Whether to enable web access logging or not.
# Set to yes to enable logging to /var/log/jenkins/access_log
JENKINS_ENABLE_ACCESS_LOG="no"

# OS LIMITS SETUP
#   comment this out to observe /etc/security/limits.conf
#   this is on by default because http://github.com/jenkinsci/jenkins/commit/2fb288474e980d0e7ff9c4a3b768874835a3e92e
#   reported that Ubuntu's PAM configuration doesn't include pam_limits.so, and as a result the # of file
#   descriptors are forced to 1024 regardless of /etc/security/limits.conf
MAXOPENFILES=8192

# set the umask to control permission bits of files that Jenkins creates.
#   027 makes files read-only for group and inaccessible for others, which some security sensitive users
#   might consider benefitial, especially if Jenkins runs in a box that's used for multiple purposes.
#   Beware that 027 permission would interfere with sudo scripts that run on the master (JENKINS-25065.)
#
#   Note also that the particularly sensitive part of $JENKINS_HOME (such as credentials) are always
#   written without world access regardless of this setting.
#   UMASK=027

# port for HTTP connector (default 8080; disable with -1)
HTTP_PORT=8080

# servlet context, important if you want to use apache proxying
PREFIX=/$NAME

# arguments to pass to jenkins.
# full list available from java -jar jenkins.war --help
# --httpListenAddress=$HTTP_HOST (default 0.0.0.0)
# --httpPort=$HTTP_PORT (default 8080; disable with -1)
# --httpsPort=$HTTP_PORT
# --argumentsRealm.passwd.$ADMIN_USER=[password]
# --argumentsRealm.roles.$ADMIN_USER=admin
# --webroot=~/.jenkins/war (defaults to wherever jenkins.war is)
# --prefix=$PREFIX

JENKINS_ARGS="--webroot=/var/cache/$NAME/war --httpPort=$HTTP_PORT"
EOF

# Start and enable Jenkins
sudo systemctl start jenkins
sudo systemctl enable jenkins

# Open necessary firewall ports
sudo ufw allow 8080  # Jenkins UI
sudo ufw allow 9000  # SonarQube
sudo ufw allow 50000 # Jenkins agent
sudo ufw allow 22    # SSH
sudo ufw enable

# Install Jenkins plugins using the CLI
sudo wget http://localhost:8080/jnlpJars/jenkins-cli.jar -O /tmp/jenkins-cli.jar
sleep 30  # Give Jenkins time to start

# Install required plugins
sudo java -jar /tmp/jenkins-cli.jar -s http://localhost:8080/ -auth ${JENKINS_ADMIN_USER}:${JENKINS_ADMIN_PASSWORD} install-plugin \
  git pipeline job-dsl workflow-aggregator matrix-auth docker-plugin docker-workflow blueocean credentials-binding \
  sonar kubernetes pipeline-stage-view quality-gates slack email-ext configuration-as-code webhook-step maven-plugin \
  jacoco junit

# Install Kubernetes (Minikube)
curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
chmod +x minikube
sudo mv minikube /usr/local/bin/

# Install kubectl (Kubernetes CLI)
curl -LO "https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl"
chmod +x kubectl
sudo mv kubectl /usr/local/bin/

# Start Minikube
sudo -u $USER minikube start --driver=docker

# Install Helm (Kubernetes Package Manager)
curl -fsSL https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

# Install ArgoCD
kubectl create namespace argocd
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

# Install ArgoCD Image Updater
kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj-labs/argocd-image-updater/stable/manifests/install.yaml

# Expose ArgoCD API
kubectl patch svc argocd-server -n argocd -p '{"spec": {"type": "LoadBalancer"}}'

# Wait for ArgoCD to be ready
echo "Waiting for ArgoCD to be ready..."
sleep 60

# Get ArgoCD admin password
ARGOCD_ADMIN_PASSWORD=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 --decode)
echo "ArgoCD Admin Password: $ARGOCD_ADMIN_PASSWORD"

# Install SonarQube
sudo docker pull sonarqube
sudo docker run -d --name sonarqube -p 9000:9000 sonarqube

# Wait for SonarQube to be ready
echo "Waiting for SonarQube to be ready..."
sleep 60

# Create a sample Jenkins pipeline job
mkdir -p /tmp/jenkins-job
cat > /tmp/jenkins-job/config.xml << EOF
<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.42">
  <description>CI/CD Pipeline Template</description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <jenkins.model.BuildDiscarderProperty>
      <strategy class="hudson.tasks.LogRotator">
        <daysToKeep>7</daysToKeep>
        <numToKeep>10</numToKeep>
        <artifactDaysToKeep>-1</artifactDaysToKeep>
        <artifactNumToKeep>-1</artifactNumToKeep>
      </strategy>
    </jenkins.model.BuildDiscarderProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsScmFlowDefinition" plugin="workflow-cps@2.94">
    <scm class="hudson.plugins.git.GitSCM" plugin="git@4.8.0">
      <configVersion>2</configVersion>
      <userRemoteConfigs>
        <hudson.plugins.git.UserRemoteConfig>
          <url>https://github.com/your-repo/your-application.git</url>
          <credentialsId>git-credentials</credentialsId>
        </hudson.plugins.git.UserRemoteConfig>
      </userRemoteConfigs>
      <branches>
        <hudson.plugins.git.BranchSpec>
          <name>*/main</name>
        </hudson.plugins.git.BranchSpec>
      </branches>
      <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
      <submoduleCfg class="empty-list"/>
      <extensions/>
    </scm>
    <scriptPath>Jenkinsfile</scriptPath>
    <lightweight>true</lightweight>
  </definition>
  <triggers>
    <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.34.0">
      <spec></spec>
    </com.cloudbees.jenkins.GitHubPushTrigger>
  </triggers>
  <disabled>false</disabled>
</flow-definition>
EOF

# Upload job configuration to Jenkins
curl -X POST "http://localhost:8080/createItem?name=cicd-pipeline" \
  --user "${JENKINS_ADMIN_USER}:${JENKINS_ADMIN_PASSWORD}" \
  --header "Content-Type:application/xml" \
  -d @/tmp/jenkins-job/config.xml

# Restart Jenkins to apply all changes
sudo systemctl restart jenkins

# Wait for Jenkins to restart
sleep 30

echo "================== Installation Completed =================="
echo "Jenkins URL: http://$(curl -s ifconfig.me):8080/ (${JENKINS_ADMIN_USER}/${JENKINS_ADMIN_PASSWORD})"
echo "SonarQube URL: http://$(curl -s ifconfig.me):9000/ (admin/admin)"
echo "ArgoCD Password: $ARGOCD_ADMIN_PASSWORD"
echo "============================================================"
echo "All tools, plugins, credentials, and configurations are set up!"
echo "You can now create a Jenkins pipeline using the provided Jenkinsfile."